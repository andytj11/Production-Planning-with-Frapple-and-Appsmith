{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 115,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{\n{\n  tasks: (GetPlanGantt.data || []).map(r => ({\n    // unique id ties to the exact row version\n    id:   `${r.order_ref}|${r.item_id}|${r.location_id}|${r.startdate}|${r.enddate}`,\n\n    // visible\n    name: `${r.item_id} — ${r.location_id}`,\n    start: r.startdate,\n    end:   r.enddate,\n    progress: 100,\n\n    // metadata for exact UPDATE\n    ref:  String(r.order_ref),\n    item: String(r.item_id),\n    loc:  String(r.location_id),\n    db_start: r.startdate,\n    db_end:   r.enddate\n  }))\n}\n}}\n",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [
    {
      "key": "onGanttSave"
    }
  ],
  "dynamicTriggerPathList": [
    {
      "key": "onGanttSave"
    }
  ],
  "events": [
    "onGanttSave"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "urrq5tuvpq",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 99,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 23,
  "mobileTopRow": 69,
  "needsErrorInfo": false,
  "onGanttSave": "{{\n  // Read the payload that the widget put into its model\n  (async () => {\n    const p = fc.model.save;        // <-- replace 'fc' with your widget name if different\n    if (!p) { showAlert('No payload','error'); return; }\n\n    try {\n      await UpdatePlanEvent.run(p);  // 1) UPDATE first\n      await GetPlanGantt.run();      // 2) then refresh\n      await storeValue('ganttSaving',  false, true);\n      await storeValue('ganttPending', {},    true);\n      showAlert('Changes saved','success');\n    } catch (e) {\n      await storeValue('ganttSaving', false, true);\n      showAlert(e.message || 'Save failed','error');\n    }\n  })()\n}}\n",
  "originalBottomRow": 115,
  "originalTopRow": 73,
  "parentColumnSpace": 17.9375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  padding: 29px 25px;\n  box-sizing: border-box;\n  font-family: system-ui;\n  background: #fff;\n}\n\n.tip-container {\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.tip-container h2 {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 700;\n}\n\n.tip-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-bottom: 9px;\n}\n\n.tip-header div {\n  color: #999;\n}\n\n.content {\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.button-container {\n  text-align: right;\n  padding-top: 4px;\n}\n\n.button-container button {\n  margin: 0 10px;\n  cursor: pointer;\n  border-radius: var(--appsmith-theme-borderRadius);\n  padding: 6px 16px;\n  background: none;\n  height: auto;\n  transition: all 0.3s ease;\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n  color: #fff;\n  border: 1px solid var(--appsmith-theme-primaryColor) !important;\n}\n\n.button-container button.reset {\n  border: 1px solid #999;\n  color: #999;\n  outline: none;\n  box-shadow: none;\n}\n\n.button-container button.reset:hover:not(:disabled) {\n  color: var(--appsmith-theme-primaryColor);\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.button-container button.reset:disabled {\n  cursor: default;\n}",
    "html": "<link rel=\"stylesheet\" href=\"https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.css\">\n<script src=\"https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.min.js\"></script>\n\n<div id=\"ganttContainer\" style=\"width:100%;\"></div>\n<div id=\"glog\" style=\"position:absolute;bottom:6px;left:6px;font:12px/1.25 monospace;color:#999\"></div>\n",
    "js": "/******** logger (to the gray box) ********/\nfunction log(msg) {\n  const el = document.getElementById('glog');\n  if (el) el.textContent = `[${new Date().toLocaleTimeString()}] ${msg}\\n` + el.textContent;\n}\n\n/******** safe store ********/\nfunction storeGet(key, fallback) {\n  try {\n    if (appsmith.store && key in appsmith.store) return appsmith.store[key] ?? fallback;\n  } catch (_) {}\n  return fallback;\n}\nfunction storeSet(key, value) {\n  try {\n    return storeValue(key, value, true);\n  } catch (_) {\n    return Promise.resolve();\n  }\n}\n\n/******** loaders ********/\nfunction loadCss(href) {\n  return new Promise((res, rej) => {\n    if (document.querySelector(`link[href=\"${href}\"]`)) return res();\n    const l = document.createElement('link');\n    l.rel = 'stylesheet';\n    l.href = href;\n    l.onload = res;\n    l.onerror = () => rej(new Error('CSS load failed: ' + href));\n    document.head.appendChild(l);\n  });\n}\nfunction loadScript(src) {\n  return new Promise((res, rej) => {\n    if (document.querySelector(`script[src=\"${src}\"]`)) return res();\n    const s = document.createElement('script');\n    s.src = src;\n    s.async = true;\n    s.onload = res;\n    s.onerror = () => rej(new Error('Script load failed: ' + src));\n    document.head.appendChild(s);\n  });\n}\nasync function ensureFrappeGantt() {\n  await loadCss('https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.css');\n  await loadScript('https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.min.js');\n  if (!window.Gantt) throw new Error('Frappe Gantt not available');\n}\n\n/******** build tasks (Default Model + overlay) ********/\nconst toDate = v => v ? v instanceof Date ? v : new Date(v) : null;\nfunction getPending() {\n  return storeGet('ganttPending', {});\n}\nfunction setPending(obj) {\n  return storeSet('ganttPending', obj);\n}\nlet metaById = {}; // id -> {ref,item,loc,db_start,db_end}\n\nfunction buildTasks() {\n  const rows = appsmith.model && appsmith.model.tasks ? appsmith.model.tasks : [];\n  const pending = getPending();\n  metaById = {};\n  return rows.map(r => {\n    metaById[r.id] = {\n      ref: r.ref,\n      item: r.item,\n      loc: r.loc,\n      db_start: r.db_start,\n      db_end: r.db_end\n    };\n    const overlay = pending[r.id];\n    return {\n      id: r.id,\n      name: r.name,\n      start: overlay ? toDate(overlay.startISO) : toDate(r.start) ?? new Date(),\n      end: overlay ? toDate(overlay.endISO) : toDate(r.end) ?? new Date(Date.now() + 3600000),\n      progress: 100\n    };\n  });\n}\nfunction hashTasks(tasks) {\n  return JSON.stringify(tasks.map(t => ({\n    id: String(t.id),\n    s: toDate(t.start)?.toISOString() || null,\n    e: toDate(t.end)?.toISOString() || null\n  })));\n}\n\n/******** gantt lifecycle ********/\nlet gantt = null;\nlet lastHash = '';\nlet lastScrollLeft = 0; // keep horizontal position across refreshes\n\nfunction options() {\n  return {\n    view_mode: storeGet('ganttView', 'Day'),\n    date_format: 'YYYY-MM-DD HH:mm',\n    on_date_change(task, start, end) {\n      // 1) keep where dropped + lock redraws\n      const pending = getPending();\n      pending[task.id] = {\n        startISO: start.toISOString(),\n        endISO: end.toISOString()\n      };\n      setPending(pending);\n      storeSet('ganttSaving', true);\n\n      // 2) build save payload and put it in the widget model\n      const m = metaById[task.id] || {};\n      appsmith.updateModel({\n        save: {\n          order_ref: m.ref,\n          item_id: m.item,\n          location_id: m.loc,\n          // original DB values to target the exact row\n          orig_startdate: m.db_start || null,\n          orig_enddate: m.db_end || null,\n          // new values\n          startdate: start.toISOString(),\n          enddate: end.toISOString(),\n          status: 'planned'\n        }\n      });\n\n      // 3) trigger the Appsmith event; the event will read fc.model.save\n      appsmith.triggerEvent('onGanttSave');\n      log(`onGanttSave → ref=${m.ref}`);\n    },\n    on_view_change(mode) {\n      storeSet('ganttView', mode);\n    },\n    custom_popup_html(t) {\n      return `<div style=\"padding:6px\"><b>${t.name}</b><br>${t.start} → ${t.end}</div>`;\n    }\n  };\n}\nasync function render() {\n  await ensureFrappeGantt();\n  const box = document.getElementById('ganttContainer');\n  if (!box) return;\n  const tasks = buildTasks();\n  const h = hashTasks(tasks);\n\n  // Single‑scrollbar behavior: vertical scroll by page, horizontal by Gantt\n  const setBoxScrollMode = () => {\n    box.style.height = tasks.length * 38 + 40 + 'px'; // grows with rows\n    box.style.overflowX = 'auto'; // keep horizontal scroll\n    box.style.overflowY = 'hidden'; // hide inner vertical scroll (page handles it)\n    box.style.width = '100%';\n  };\n  if (!gantt) {\n    box.innerHTML = '';\n    setBoxScrollMode();\n    gantt = new window.Gantt('#ganttContainer', tasks, options());\n\n    // cursors once\n    if (!document.getElementById('ganttCursors')) {\n      const style = document.createElement('style');\n      style.id = 'ganttCursors';\n      style.textContent = `\n        #ganttContainer .bar { cursor: move; }\n        #ganttContainer .handle { cursor: ew-resize; }\n      `;\n      document.head.appendChild(style);\n    }\n    lastHash = h;\n    return;\n  }\n  if (storeGet('ganttSaving', false)) return; // hold while saving\n\n  if (h !== lastHash) {\n    lastScrollLeft = box.scrollLeft;\n    setBoxScrollMode();\n    if (typeof gantt.refresh === 'function') {\n      gantt.refresh(tasks);\n    } else {\n      box.innerHTML = '';\n      gantt = new window.Gantt('#ganttContainer', tasks, options());\n    }\n    lastHash = h;\n    box.scrollLeft = lastScrollLeft; // restore horizontal scroll position\n  }\n}\n\n/******** wire up ********/\nappsmith.onReady(async () => {\n  await storeSet('ganttPending', storeGet('ganttPending', {}));\n  await storeSet('ganttSaving', storeGet('ganttSaving', false));\n  await storeSet('ganttView', storeGet('ganttView', 'Day'));\n  render();\n});\nappsmith.onUiChange(render);"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 73,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  padding: 29px 25px;\n  box-sizing: border-box;\n  font-family: system-ui;\n  background: #fff;\n}\n\n.tip-container {\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.tip-container h2 {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 700;\n}\n\n.tip-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-bottom: 9px;\n}\n\n.tip-header div {\n  color: #999;\n}\n\n.content {\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.button-container {\n  text-align: right;\n  padding-top: 4px;\n}\n\n.button-container button {\n  margin: 0 10px;\n  cursor: pointer;\n  border-radius: var(--appsmith-theme-borderRadius);\n  padding: 6px 16px;\n  background: none;\n  height: auto;\n  transition: all 0.3s ease;\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n  color: #fff;\n  border: 1px solid var(--appsmith-theme-primaryColor) !important;\n}\n\n.button-container button.reset {\n  border: 1px solid #999;\n  color: #999;\n  outline: none;\n  box-shadow: none;\n}\n\n.button-container button.reset:hover:not(:disabled) {\n  color: var(--appsmith-theme-primaryColor);\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.button-container button.reset:disabled {\n  cursor: default;\n}",
    "html": "<link rel=\"stylesheet\" href=\"https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.css\">\n<script src=\"https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.min.js\"></script>\n\n<div id=\"ganttContainer\" style=\"width:100%;\"></div>\n<div id=\"glog\" style=\"position:absolute;bottom:6px;left:6px;font:12px/1.25 monospace;color:#999\"></div>\n",
    "js": "/******** logger (to the gray box) ********/\nfunction log(msg){\n  const el = document.getElementById('glog');\n  if (el) el.textContent = `[${new Date().toLocaleTimeString()}] ${msg}\\n` + el.textContent;\n}\n\n/******** safe store ********/\nfunction storeGet(key, fallback){\n  try { if (appsmith.store && key in appsmith.store) return appsmith.store[key] ?? fallback; } catch(_) {}\n  return fallback;\n}\nfunction storeSet(key, value){ try { return storeValue(key, value, true); } catch(_) { return Promise.resolve(); } }\n\n/******** loaders ********/\nfunction loadCss(href){\n  return new Promise((res, rej) => {\n    if (document.querySelector(`link[href=\"${href}\"]`)) return res();\n    const l = document.createElement('link');\n    l.rel = 'stylesheet'; l.href = href;\n    l.onload = res; l.onerror = () => rej(new Error('CSS load failed: '+href));\n    document.head.appendChild(l);\n  });\n}\nfunction loadScript(src){\n  return new Promise((res, rej) => {\n    if (document.querySelector(`script[src=\"${src}\"]`)) return res();\n    const s = document.createElement('script');\n    s.src = src; s.async = true;\n    s.onload = res; s.onerror = () => rej(new Error('Script load failed: '+src));\n    document.head.appendChild(s);\n  });\n}\nasync function ensureFrappeGantt(){\n  await loadCss('https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.css');\n  await loadScript('https://unpkg.com/frappe-gantt@0.6.0/dist/frappe-gantt.min.js');\n  if (!window.Gantt) throw new Error('Frappe Gantt not available');\n}\n\n/******** build tasks (Default Model + overlay) ********/\nconst toDate = (v) => v ? (v instanceof Date ? v : new Date(v)) : null;\nfunction getPending(){ return storeGet('ganttPending', {}); }\nfunction setPending(obj){ return storeSet('ganttPending', obj); }\n\nlet metaById = {}; // id -> {ref,item,loc,db_start,db_end}\n\nfunction buildTasks(){\n  const rows = (appsmith.model && appsmith.model.tasks) ? appsmith.model.tasks : [];\n  const pending = getPending();\n  metaById = {};\n\n  return rows.map(r => {\n    metaById[r.id] = { ref: r.ref, item: r.item, loc: r.loc, db_start: r.db_start, db_end: r.db_end };\n    const overlay = pending[r.id];\n    return {\n      id: r.id,\n      name: r.name,\n      start: overlay ? toDate(overlay.startISO) : toDate(r.start) ?? new Date(),\n      end:   overlay ? toDate(overlay.endISO)   : toDate(r.end)   ?? new Date(Date.now()+3600000),\n      progress: 100\n    };\n  });\n}\nfunction hashTasks(tasks){\n  return JSON.stringify(tasks.map(t => ({\n    id: String(t.id),\n    s: toDate(t.start)?.toISOString() || null,\n    e: toDate(t.end)?.toISOString()   || null\n  })));\n}\n\n/******** gantt lifecycle ********/\nlet gantt = null;\nlet lastHash = '';\nlet lastScrollLeft = 0;  // keep horizontal position across refreshes\n\nfunction options(){\n  return {\n    view_mode: storeGet('ganttView', 'Day'),\n    date_format: 'YYYY-MM-DD HH:mm',\n\n    on_date_change(task, start, end){\n      // 1) keep where dropped + lock redraws\n      const pending = getPending();\n      pending[task.id] = { startISO: start.toISOString(), endISO: end.toISOString() };\n      setPending(pending);\n      storeSet('ganttSaving', true);\n\n      // 2) build save payload and put it in the widget model\n      const m = metaById[task.id] || {};\n      appsmith.updateModel({\n        save: {\n          order_ref: m.ref,\n          item_id: m.item,\n          location_id: m.loc,\n          // original DB values to target the exact row\n          orig_startdate: m.db_start || null,\n          orig_enddate:   m.db_end   || null,\n          // new values\n          startdate: start.toISOString(),\n          enddate:   end.toISOString(),\n          status: 'planned'\n        }\n      });\n\n      // 3) trigger the Appsmith event; the event will read fc.model.save\n      appsmith.triggerEvent('onGanttSave');\n      log(`onGanttSave → ref=${m.ref}`);\n    },\n\n    on_view_change(mode){ storeSet('ganttView', mode); },\n\n    custom_popup_html(t){\n      return `<div style=\"padding:6px\"><b>${t.name}</b><br>${t.start} → ${t.end}</div>`;\n    }\n  };\n}\n\nasync function render(){\n  await ensureFrappeGantt();\n  const box = document.getElementById('ganttContainer');\n  if (!box) return;\n\n  const tasks = buildTasks();\n  const h = hashTasks(tasks);\n\n  // Single‑scrollbar behavior: vertical scroll by page, horizontal by Gantt\n  const setBoxScrollMode = () => {\n    box.style.height    = (tasks.length * 38 + 40) + 'px'; // grows with rows\n    box.style.overflowX = 'auto';   // keep horizontal scroll\n    box.style.overflowY = 'hidden'; // hide inner vertical scroll (page handles it)\n    box.style.width     = '100%';\n  };\n\n  if (!gantt) {\n    box.innerHTML = '';\n    setBoxScrollMode();\n    gantt = new window.Gantt('#ganttContainer', tasks, options());\n\n    // cursors once\n    if (!document.getElementById('ganttCursors')) {\n      const style = document.createElement('style');\n      style.id = 'ganttCursors';\n      style.textContent = `\n        #ganttContainer .bar { cursor: move; }\n        #ganttContainer .handle { cursor: ew-resize; }\n      `;\n      document.head.appendChild(style);\n    }\n\n    lastHash = h;\n    return;\n  }\n\n  if (storeGet('ganttSaving', false)) return;  // hold while saving\n\n  if (h !== lastHash) {\n    lastScrollLeft = box.scrollLeft;\n    setBoxScrollMode();\n    if (typeof gantt.refresh === 'function') {\n      gantt.refresh(tasks);\n    } else {\n      box.innerHTML = '';\n      gantt = new window.Gantt('#ganttContainer', tasks, options());\n    }\n    lastHash = h;\n    box.scrollLeft = lastScrollLeft; // restore horizontal scroll position\n  }\n}\n\n/******** wire up ********/\nappsmith.onReady(async () => {\n  await storeSet('ganttPending', storeGet('ganttPending', {}));\n  await storeSet('ganttSaving',  storeGet('ganttSaving',  false));\n  await storeSet('ganttView',    storeGet('ganttView',    'Day'));\n  render();\n});\nappsmith.onUiChange(render);\n"
  },
  "version": 1,
  "widgetId": "4cusy49bzo",
  "widgetName": "fc"
}